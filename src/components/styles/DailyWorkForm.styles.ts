import { makeStyles, tokens } from "@fluentui/react-components";

export const useStyles = makeStyles({
  container: {
    display: "flex",
    flexDirection: "column",
    height: "100vh",
    margin: "0 auto",
    backgroundColor: tokens.colorNeutralBackground3,
    overflow: "hidden",
    userSelect: "none",
    cursor: "default",
    "& textarea, & input": {
      fontSize: tokens.fontSizeBase300,
    },
  },
  mainContent: {
    display: "flex",
    flexDirection: "column",
    height: "100vh",
  },
  header: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    padding: `${tokens.spacingVerticalM} ${tokens.spacingHorizontalXXL}`,
    backgroundColor: tokens.colorNeutralBackground1,
    borderBottom: `1px solid ${tokens.colorNeutralStroke2}`,
    boxShadow: tokens.shadow4,
    zIndex: 10,
    backdropFilter: "blur(8px)",
  },
  headerLeft: {
    display: "flex",
    alignItems: "center",
    gap: tokens.spacingHorizontalM,
  },
  title: {
    fontSize: tokens.fontSizeHero800,
    fontWeight: tokens.fontWeightSemibold,
    color: tokens.colorBrandForeground1,
    margin: 0,
    lineHeight: tokens.lineHeightHero800,
    letterSpacing: "-0.02em",
  },
  headerActions: {
    display: "flex",
    gap: tokens.spacingHorizontalM,
    alignItems: "center",
  },
  saveButton: {
    minWidth: "auto",
    boxShadow: tokens.shadow2,
    alignItems: "center",
  },
  content: {
    flex: 1,
    overflow: "auto",
    padding: `${tokens.spacingVerticalXXL} ${tokens.spacingHorizontalXXL}`,
    backgroundColor: tokens.colorNeutralBackground3,
    overscrollBehaviorY: "contain",
  },
  card: {
    marginBottom: tokens.spacingVerticalXL,
    boxShadow: tokens.shadow8,
    border: "none",
    borderRadius: tokens.borderRadiusXLarge,
    overflow: "hidden",
    backgroundColor: tokens.colorNeutralBackground1,
  },
  cardHeader: {
    padding: `${tokens.spacingVerticalL} ${tokens.spacingHorizontalXXL}`,
    backgroundColor: tokens.colorSubtleBackground,
    borderBottom: `1px solid ${tokens.colorNeutralStroke2}`,
    position: "relative",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
  },
  cardContent: {
    padding: `${tokens.spacingVerticalL} ${tokens.spacingHorizontalXXL}`,
  },
  sectionTitle: {
    fontSize: tokens.fontSizeBase400,
    fontWeight: tokens.fontWeightSemibold,
    color: tokens.colorNeutralForeground1,
    margin: 0,
    display: "flex",
    alignItems: "center",
    gap: tokens.spacingHorizontalS,
  },
  flexContainer: {
    display: "flex",
    flexDirection: "column",
    gap: tokens.spacingVerticalXL,
  },
  firstRow: {
    display: "flex",
    gap: tokens.spacingHorizontalXL,
    alignItems: "start",
  },
  dateField: {
    flex: 1,
  },
  timeField: {
    flexShrink: 0,
    width: "fit-content",
    minWidth: "120px",
  },
  secondRow: {
    display: "flex",
    gap: tokens.spacingHorizontalXL,
    flexWrap: "wrap",
    rowGap: tokens.spacingVerticalXL,
  },
  equalField: {
    flex: 1,
    minWidth: "250px",
  },
  flexibleInput: {
    minWidth: "0 !important",
    width: "100%",
    "& .fui-Input": {
      minWidth: "0 !important",
      width: "100%",
    },
    "& .fui-Input__input": {
      minWidth: "0 !important",
      width: "100%",
    },
  },
  enhancedField: {
    position: "relative",
    "&:focus-within": {
      "& .field-icon": {
        color: tokens.colorBrandForeground1,
      },
    },
  },
  taskContainer: {
    display: "flex",
    flexDirection: "column",
    gap: tokens.spacingVerticalXL,
  },
  taskCard: {
    position: "relative",
    padding: `${tokens.spacingVerticalXL} ${tokens.spacingHorizontalXL}`,
    backgroundColor: tokens.colorNeutralBackground1,
    border: `2px solid ${tokens.colorNeutralStroke2}`,
    borderRadius: tokens.borderRadiusLarge,
    boxShadow: tokens.shadow4,
    transition: "all 0.3s ease-out",
    "&:focus-within": {
      border: `2px solid ${tokens.colorBrandForeground1}`,
      boxShadow: `${tokens.shadow8}, 0 0 0 2px ${tokens.colorBrandBackground2}`,
    },
  },
  taskCardCompleted: {
    backgroundColor: tokens.colorPaletteGreenBackground1,
    border: `2px solid ${tokens.colorPaletteGreenForeground3}`,
    position: "relative",
    "&::before": {
      content: '""',
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      height: "3px",
      backgroundColor: tokens.colorPaletteGreenBackground3,
      borderRadius: `${tokens.borderRadiusLarge} ${tokens.borderRadiusLarge} 0 0`,
    },
  },
  taskHeader: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: tokens.spacingVerticalS,
  },
  taskNumber: {
    width: "32px",
    height: "32px",
    borderRadius: "50%",
    backgroundColor: tokens.colorBrandBackground,
    color: tokens.colorNeutralForegroundOnBrand,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    fontSize: tokens.fontSizeBase200,
    fontWeight: tokens.fontWeightSemibold,
    transition: "all 0.2s ease-out",
  },
  taskNumberCompleted: {
    backgroundColor: tokens.colorPaletteGreenForeground3,
  },
  taskActions: {
    display: "flex",
    gap: tokens.spacingHorizontalS,
    alignItems: "center",
  },
  taskButton: {
    minWidth: "32px",
    height: "32px",
    borderRadius: "50%",
  },
  taskFieldContainer: {
    display: "flex",
    flexDirection: "column",
    gap: tokens.spacingVerticalXXS,
  },
  taskBottomSection: {
    display: "grid",
    gridTemplateColumns: "1fr auto",
    gap: tokens.spacingHorizontalXL,
    alignItems: "end",
    marginTop: tokens.spacingVerticalL,
  },
  checkboxContainer: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: tokens.spacingVerticalM,
    borderRadius: tokens.borderRadiusMedium,
    backgroundColor: tokens.colorSubtleBackground,
    border: `1px solid ${tokens.colorNeutralStroke2}`,
    minWidth: "140px",
    transition: "all 0.2s ease-out",
    "&:hover": {
      backgroundColor: tokens.colorSubtleBackgroundHover,
    },
  },
  buttonContainer: {
    display: "flex",
    justifyContent: "center",
    gap: tokens.spacingHorizontalL,
    marginTop: tokens.spacingVerticalXXL,
    paddingTop: tokens.spacingVerticalXL,
    borderTop: `1px solid ${tokens.colorNeutralStroke2}`,
  },
  addTaskButton: {
    minWidth: "200px",
    boxShadow: tokens.shadow4,
    transition: "all 0.2s ease-out",
    "&:hover": {
      boxShadow: tokens.shadow8,
    },
  },
  specialNotesField: {
    "& textarea": {
      minHeight: "160px",
      fontFamily: tokens.fontFamilyBase,
      lineHeight: tokens.lineHeightBase400,
      resize: "none",
    },
  },
  timeRangeContainer: {
    display: "grid",
    gridTemplateColumns: "minmax(0, 1fr) minmax(0, 1fr)",
    gap: tokens.spacingHorizontalL,
    "& .fui-Input": {
      minWidth: "0 !important",
      width: "100%",
    },
    "& .fui-Input__input": {
      minWidth: "0 !important",
      width: "100%",
    },
    "& input": {
      minWidth: "0 !important",
      width: "100%",
    },
  },
  dialog: {
    "& textarea, & input": {
      fontSize: tokens.fontSizeBase300,
    },
  },
});
